// This code was generated by `SqlHydra.Npgsql` -- v3.0.0.
namespace Corelai.Prime.Bff

open SqlHydra
open SqlHydra.Query.Table

[<AutoOpen>]
module ColumnReaders =
    type Column(reader: System.Data.IDataReader, getOrdinal: string -> int, column) =
        member __.Name = column
        member __.IsNull() = getOrdinal column |> reader.IsDBNull
        override __.ToString() = __.Name

    type RequiredColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
        inherit Column(reader, getOrdinal, column)

        member __.Read(?alias) =
            alias |> Option.defaultValue __.Name |> getOrdinal |> getter

    type OptionColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
        inherit Column(reader, getOrdinal, column)

        member __.Read(?alias) =
            match alias |> Option.defaultValue __.Name |> getOrdinal with
            | o when reader.IsDBNull o -> None
            | o -> Some(getter o)

    type NullableObjectColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
        inherit Column(reader, getOrdinal, column)

        member __.Read(?alias) =
            match alias |> Option.defaultValue __.Name |> getOrdinal with
            | o when reader.IsDBNull o -> null
            | o -> (getter o) |> unbox

    type NullableValueColumn<'T, 'Reader when 'T: struct and 'T: (new: unit -> 'T) and 'T :> System.ValueType and 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
        inherit Column(reader, getOrdinal, column)

        member __.Read(?alias) =
            match alias |> Option.defaultValue __.Name |> getOrdinal with
            | o when reader.IsDBNull o -> System.Nullable<'T>()
            | o -> System.Nullable<'T>(getter o)

[<AutoOpen>]
module private DataReaderExtensions =
    type System.Data.IDataReader with
        member reader.GetDateOnly(ordinal: int) =
            reader.GetDateTime(ordinal) |> System.DateOnly.FromDateTime

    type System.Data.Common.DbDataReader with
        member reader.GetTimeOnly(ordinal: int) =
            reader.GetFieldValue(ordinal) |> System.TimeOnly.FromTimeSpan

module time =

    [<CLIMutable>]
    type timeline =
        { [<ProviderDbType("Uuid")>]
          id: System.Guid
          [<ProviderDbType("Varchar")>]
          code: string
          [<ProviderDbType("Varchar")>]
          title: string
          [<ProviderDbType("Timestamp")>]
          date: System.DateTime
          [<ProviderDbType("Varchar")>]
          summary: string
          [<ProviderDbType("Text,Array")>]
          tags: string[]
          [<ProviderDbType("Varchar")>]
          lang: string
          [<ProviderDbType("Integer")>]
          version: int
          [<ProviderDbType("Varchar")>]
          image_path: string }

    let timeline = table<timeline>

    module Readers =
        type timelineReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "id")
            member __.code = RequiredColumn(reader, getOrdinal, reader.GetString, "code")
            member __.title = RequiredColumn(reader, getOrdinal, reader.GetString, "title")
            member __.date = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "date")
            member __.summary = RequiredColumn(reader, getOrdinal, reader.GetString, "summary")
            member __.tags = RequiredColumn(reader, getOrdinal, reader.GetFieldValue, "tags")
            member __.lang = RequiredColumn(reader, getOrdinal, reader.GetString, "lang")
            member __.version = RequiredColumn(reader, getOrdinal, reader.GetInt32, "version")
            member __.image_path = RequiredColumn(reader, getOrdinal, reader.GetString, "image_path")

            member __.Read() =
                { id = __.id.Read()
                  code = __.code.Read()
                  title = __.title.Read()
                  date = __.date.Read()
                  summary = __.summary.Read()
                  tags = __.tags.Read()
                  lang = __.lang.Read()
                  version = __.version.Read()
                  image_path = __.image_path.Read() }
                : timeline

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

type HydraReader(reader: Npgsql.NpgsqlDataReader) =

    let mutable accFieldCount = 0

    let buildGetOrdinal tableType =
        let fieldNames = FSharp.Reflection.FSharpType.GetRecordFields(tableType) |> Array.map _.Name

        let dictionary =
            [| 0 .. reader.FieldCount - 1 |]
            |> Array.map (fun i -> reader.GetName(i), i)
            |> Array.sortBy snd
            |> Array.skip accFieldCount
            |> Array.filter (fun (name, _) -> Array.contains name fieldNames)
            |> Array.take fieldNames.Length
            |> dict

        accFieldCount <- accFieldCount + fieldNames.Length
        fun col -> dictionary.Item col

    member __.``time.timeline`` = time.Readers.timelineReader (reader, buildGetOrdinal typeof<time.timeline>)

    member private __.AccFieldCount
        with get () = accFieldCount
        and set (value) = accFieldCount <- value

    member private __.GetReaderByName(entity: string, isOption: bool) =
        match entity, isOption with
        | "time.timeline", false -> __.``time.timeline``.Read >> box
        | "time.timeline", true -> __.``time.timeline``.ReadIfNotNull >> box
        | _ -> failwith $"Could not read type '{entity}' because no generated reader exists."

    static member private GetPrimitiveReader(t: System.Type, reader: Npgsql.NpgsqlDataReader, isOpt: bool, isNullable: bool) =

        let wrapValue get (ord: int) =
            if isOpt then
                (if reader.IsDBNull ord then None else get ord |> Some) |> box
            elif isNullable then
                (if reader.IsDBNull ord then System.Nullable() else get ord |> System.Nullable)
                |> box
            else
                get ord |> box

        let wrapRef get (ord: int) =
            if isOpt then (if reader.IsDBNull ord then None else get ord |> Some) |> box else get ord |> box

        if t = typedefof<bool> then Some(wrapValue reader.GetBoolean)
        elif t = typedefof<bool[]> then Some(wrapRef reader.GetFieldValue<bool[]>)
        elif t = typedefof<int16> then Some(wrapValue reader.GetInt16)
        elif t = typedefof<int16[]> then Some(wrapRef reader.GetFieldValue<int16[]>)
        elif t = typedefof<int> then Some(wrapValue reader.GetInt32)
        elif t = typedefof<int[]> then Some(wrapRef reader.GetFieldValue<int[]>)
        elif t = typedefof<int64> then Some(wrapValue reader.GetInt64)
        elif t = typedefof<int64[]> then Some(wrapRef reader.GetFieldValue<int64[]>)
        elif t = typedefof<double> then Some(wrapValue reader.GetDouble)
        elif t = typedefof<double[]> then Some(wrapRef reader.GetFieldValue<double[]>)
        elif t = typedefof<decimal> then Some(wrapValue reader.GetDecimal)
        elif t = typedefof<decimal[]> then Some(wrapRef reader.GetFieldValue<decimal[]>)
        elif t = typedefof<string> then Some(wrapRef reader.GetString)
        elif t = typedefof<string[]> then Some(wrapRef reader.GetFieldValue<string[]>)
        elif t = typedefof<System.Guid> then Some(wrapValue reader.GetGuid)
        elif t = typedefof<System.Guid[]> then Some(wrapRef reader.GetFieldValue<System.Guid[]>)
        elif t = typedefof<System.TimeSpan> then Some(wrapRef reader.GetTimeSpan)
        elif t = typedefof<System.TimeSpan[]> then Some(wrapRef reader.GetFieldValue<System.TimeSpan[]>)
        elif t = typedefof<System.DateOnly> then Some(wrapValue reader.GetDateOnly)
        elif t = typedefof<System.DateOnly[]> then Some(wrapRef reader.GetFieldValue<System.DateOnly[]>)
        elif t = typedefof<System.TimeOnly> then Some(wrapValue reader.GetTimeOnly)
        elif t = typedefof<System.TimeOnly[]> then Some(wrapRef reader.GetFieldValue<System.TimeOnly[]>)
        elif t = typedefof<System.DateTime> then Some(wrapValue reader.GetDateTime)
        elif t = typedefof<System.DateTime[]> then Some(wrapRef reader.GetFieldValue<System.DateTime[]>)
        elif t = typedefof<System.DateTimeOffset> then Some(wrapValue reader.GetDateTime)
        elif t = typedefof<System.DateTimeOffset[]> then Some(wrapRef reader.GetFieldValue<System.DateTimeOffset[]>)
        elif t = typedefof<byte[]> then Some(wrapRef reader.GetFieldValue<byte[]>)
        elif t = typedefof<char> then Some(wrapRef reader.GetChar)
        elif t = typedefof<char[]> then Some(wrapRef reader.GetFieldValue<char[]>)
        elif t = typedefof<float> then Some(wrapRef reader.GetFloat)
        elif t = typedefof<float[]> then Some(wrapRef reader.GetFieldValue<float[]>)
        else None

    static member Read(reader: Npgsql.NpgsqlDataReader) =
        let hydra = HydraReader(reader)


        let getOrdinalAndIncrement () =
            let ordinal = hydra.AccFieldCount
            hydra.AccFieldCount <- hydra.AccFieldCount + 1
            ordinal

        let buildEntityReadFn (t: System.Type) =
            let t, isOpt, isNullable =
                if t.IsGenericType && t.GetGenericTypeDefinition() = typedefof<Option<_>> then t.GenericTypeArguments[0], true, false
                elif t.IsGenericType && t.GetGenericTypeDefinition() = typedefof<System.Nullable<_>> then t.GenericTypeArguments[0], false, true
                else t, false, false

            match HydraReader.GetPrimitiveReader(t, reader, isOpt, isNullable) with
            | Some primitiveReader ->
                let ord = getOrdinalAndIncrement ()
                fun () -> primitiveReader ord
            | None ->
                let nameParts =
                    match t.FullName with
                    | null -> failwith $"Type {t} has no FullName"
                    | fullName -> fullName.Split([| '.'; '+' |])

                let schemaAndType =
                    nameParts
                    |> Array.skip (nameParts.Length - 2)
                    |> fun parts -> System.String.Join(".", parts)

                hydra.GetReaderByName(schemaAndType, isOpt)

        // Return a fn that will hydrate 'T (which may be a tuple)
        // This fn will be called once per each record returned by the data reader.
        let t = typeof<'T>

        if FSharp.Reflection.FSharpType.IsTuple(t) then
            let readEntityFns = FSharp.Reflection.FSharpType.GetTupleElements(t) |> Array.map buildEntityReadFn

            fun () ->
                let entities = readEntityFns |> Array.map (fun read -> read ())
                Microsoft.FSharp.Reflection.FSharpValue.MakeTuple(entities, t) :?> 'T
        else
            let readEntityFn = t |> buildEntityReadFn
            fun () -> readEntityFn () :?> 'T


/// Provides select builders that use the generated HydraReader.Read.
module HydraBuilders =
    open SqlHydra.Query

    /// Builds a select query with a QueryContext - returns a Task query result
    let selectTask ct =
        selectTask<'Selected, 'Mapped, Npgsql.NpgsqlDataReader> HydraReader.Read ct

    /// Builds a select query with a QueryContext - returns an Async query result
    let selectAsync ct =
        selectAsync<'Selected, 'Mapped, Npgsql.NpgsqlDataReader> HydraReader.Read ct
